- name: creating ec2 instance
  hosts: local
  connection: local
  vars:
    subnet_id: subnet-06b401e93006806d8
    image_id: ami-09c813fb71547fc4f
    instance_type: t3.micro
    sg_id: sg-000e29e59ac2e3185 
    zone: dawsclous.tech
    instances:
    - mysql
    - backend
    - frontend
      
  tasks:
  - name: install python libraries
    ansible.builtin.pip:
      name: "{{ item }}"
      executable: pip3.9
    loop:
    - botocore
    - boto3

  - name: creating ec2 instances
    amazon.aws.ec2_instance:
      name: "{{ item }}"
      # region: us-east-1
      subnet_id: "{{ subnet_id }}"
      security_group: "{{ sg_id }}"
      image_id: "{{ image_id }}"
      instance_type: "{{ instance_type }}"
    loop: "{{ instances }}"
    register: "ec2_info"

  # - name: print ec2 info
  #   ansible.builtin.debug:
  #     msg: "{{ ec2_info }}"


  - name: print private ip address
    ansible.builtin.debug:
      msg: "{{ item.instances[0].private_ip_address }}"
    loop: "{{ ec2_info.results }}"

  - name: create private ip r53 record
    amazon.aws.route53:
      state: present
      zone: "{{ zone }}"
      record: "{{ item.item }}.{{ zone }}"
      type: A
      ttl: 1
      value: "{{ item.instances[0].private_ip_address }}"
      wait: true
      overwrite: true
    loop: "{{ ec2_info.results }}"

  - name: create public ip r53 record for frontend
    amazon.aws.route53:
      state: present
      zone: "{{ zone }}"
      record: "{{ zone }}"
      type: A
      ttl: 1
      value: "{{ item.instances[0].public_ip_address }}"
      wait: true
      overwrite: true
    loop: "{{ ec2_info.results }}"
    when: item.item == "frontend"